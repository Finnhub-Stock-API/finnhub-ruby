=begin
#Finnhub API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module FinnhubRuby
  class SearchBody
    # Search query
    attr_accessor :query

    # List of isin to search, comma separated (Max: 50).
    attr_accessor :isins

    # List of cusip to search, comma separated (Max: 50).
    attr_accessor :cusips

    # List of SEC Center Index Key to search, comma separated (Max: 50).
    attr_accessor :ciks

    # List of SEDAR issuer number to search, comma separated (Max: 50).
    attr_accessor :sedar_ids

    # List of Companies House number to search, comma separated (Max: 50).
    attr_accessor :ch_ids

    # List of symbols to search, comma separated (Max: 50).
    attr_accessor :symbols

    # List of sedols to search, comma separated (Max: 50).
    attr_accessor :sedols

    # List of sources to search, comma separated (Max: 50). Look at <code>/filter</code> endpoint to see all available values.
    attr_accessor :sources

    # List of forms to search, comma separated (Max: 50). Look at <code>/filter</code> endpoint to see all available values.
    attr_accessor :forms

    # List of gics to search, comma separated (Max: 50). Look at <code>/filter</code> endpoint to see all available values.
    attr_accessor :gics

    # List of sources to search, comma separated (Max: 50). Look at <code>/filter</code> endpoint to see all available values.
    attr_accessor :naics

    # List of exhibits to search, comma separated (Max: 50). Look at <code>/filter</code> endpoint to see all available values.
    attr_accessor :exhibits

    # List of exchanges to search, comma separated (Max: 50). Look at <code>/filter</code> endpoint to see all available values.
    attr_accessor :exchanges

    # List of sources to search, comma separated (Max: 50). Look at <code>/filter</code> endpoint to see all available values.
    attr_accessor :countries

    # List of SEC's exchanges act to search, comma separated. Look at <code>/filter</code> endpoint to see all available values.
    attr_accessor :acts

    # List of market capitalization to search, comma separated. Look at <code>/filter</code> endpoint to see all available values.
    attr_accessor :caps

    # Search from date in format: YYYY-MM-DD, default from the last 2 years
    attr_accessor :from_date

    # Search to date in format: YYYY-MM-DD, default to today
    attr_accessor :to_date

    # Use for pagination, default to page 1
    attr_accessor :page

    # Sort result by, default: sortMostRecent. Look at <code>/filter</code> endpoint to see all available values.
    attr_accessor :sort

    # Enable highlight in returned filings. If enabled, only return 10 results each time
    attr_accessor :highlighted

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'query' => :'query',
        :'isins' => :'isins',
        :'cusips' => :'cusips',
        :'ciks' => :'ciks',
        :'sedar_ids' => :'sedarIds',
        :'ch_ids' => :'chIds',
        :'symbols' => :'symbols',
        :'sedols' => :'sedols',
        :'sources' => :'sources',
        :'forms' => :'forms',
        :'gics' => :'gics',
        :'naics' => :'naics',
        :'exhibits' => :'exhibits',
        :'exchanges' => :'exchanges',
        :'countries' => :'countries',
        :'acts' => :'acts',
        :'caps' => :'caps',
        :'from_date' => :'fromDate',
        :'to_date' => :'toDate',
        :'page' => :'page',
        :'sort' => :'sort',
        :'highlighted' => :'highlighted'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'query' => :'String',
        :'isins' => :'String',
        :'cusips' => :'String',
        :'ciks' => :'String',
        :'sedar_ids' => :'String',
        :'ch_ids' => :'String',
        :'symbols' => :'String',
        :'sedols' => :'String',
        :'sources' => :'String',
        :'forms' => :'String',
        :'gics' => :'String',
        :'naics' => :'String',
        :'exhibits' => :'String',
        :'exchanges' => :'String',
        :'countries' => :'String',
        :'acts' => :'String',
        :'caps' => :'String',
        :'from_date' => :'String',
        :'to_date' => :'String',
        :'page' => :'String',
        :'sort' => :'String',
        :'highlighted' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FinnhubRuby::SearchBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FinnhubRuby::SearchBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.key?(:'isins')
        self.isins = attributes[:'isins']
      end

      if attributes.key?(:'cusips')
        self.cusips = attributes[:'cusips']
      end

      if attributes.key?(:'ciks')
        self.ciks = attributes[:'ciks']
      end

      if attributes.key?(:'sedar_ids')
        self.sedar_ids = attributes[:'sedar_ids']
      end

      if attributes.key?(:'ch_ids')
        self.ch_ids = attributes[:'ch_ids']
      end

      if attributes.key?(:'symbols')
        self.symbols = attributes[:'symbols']
      end

      if attributes.key?(:'sedols')
        self.sedols = attributes[:'sedols']
      end

      if attributes.key?(:'sources')
        self.sources = attributes[:'sources']
      end

      if attributes.key?(:'forms')
        self.forms = attributes[:'forms']
      end

      if attributes.key?(:'gics')
        self.gics = attributes[:'gics']
      end

      if attributes.key?(:'naics')
        self.naics = attributes[:'naics']
      end

      if attributes.key?(:'exhibits')
        self.exhibits = attributes[:'exhibits']
      end

      if attributes.key?(:'exchanges')
        self.exchanges = attributes[:'exchanges']
      end

      if attributes.key?(:'countries')
        self.countries = attributes[:'countries']
      end

      if attributes.key?(:'acts')
        self.acts = attributes[:'acts']
      end

      if attributes.key?(:'caps')
        self.caps = attributes[:'caps']
      end

      if attributes.key?(:'from_date')
        self.from_date = attributes[:'from_date']
      end

      if attributes.key?(:'to_date')
        self.to_date = attributes[:'to_date']
      end

      if attributes.key?(:'page')
        self.page = attributes[:'page']
      end

      if attributes.key?(:'sort')
        self.sort = attributes[:'sort']
      end

      if attributes.key?(:'highlighted')
        self.highlighted = attributes[:'highlighted']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @query.nil?
        invalid_properties.push('invalid value for "query", query cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @query.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          query == o.query &&
          isins == o.isins &&
          cusips == o.cusips &&
          ciks == o.ciks &&
          sedar_ids == o.sedar_ids &&
          ch_ids == o.ch_ids &&
          symbols == o.symbols &&
          sedols == o.sedols &&
          sources == o.sources &&
          forms == o.forms &&
          gics == o.gics &&
          naics == o.naics &&
          exhibits == o.exhibits &&
          exchanges == o.exchanges &&
          countries == o.countries &&
          acts == o.acts &&
          caps == o.caps &&
          from_date == o.from_date &&
          to_date == o.to_date &&
          page == o.page &&
          sort == o.sort &&
          highlighted == o.highlighted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [query, isins, cusips, ciks, sedar_ids, ch_ids, symbols, sedols, sources, forms, gics, naics, exhibits, exchanges, countries, acts, caps, from_date, to_date, page, sort, highlighted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FinnhubRuby.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
