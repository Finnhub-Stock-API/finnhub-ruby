=begin
#Finnhub API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module FinnhubRuby
  class BondProfile
    # ISIN.
    attr_accessor :isin

    # Cusip.
    attr_accessor :cusip

    # FIGI.
    attr_accessor :figi

    # Coupon.
    attr_accessor :coupon

    # Period.
    attr_accessor :maturity_date

    # Offering price.
    attr_accessor :offering_price

    # Issue date.
    attr_accessor :issue_date

    # Bond type.
    attr_accessor :bond_type

    # Bond type.
    attr_accessor :debt_type

    # Industry.
    attr_accessor :industry_group

    # Sub-Industry.
    attr_accessor :industry_sub_group

    # Asset.
    attr_accessor :asset

    # Asset.
    attr_accessor :asset_type

    # Dated date.
    attr_accessor :dated_date

    # First coupon date.
    attr_accessor :first_coupon_date

    # Offering amount.
    attr_accessor :original_offering

    # Outstanding amount.
    attr_accessor :amount_outstanding

    # Payment frequency.
    attr_accessor :payment_frequency

    # Security level.
    attr_accessor :security_level

    # Callable.
    attr_accessor :callable

    # Coupon type.
    attr_accessor :coupon_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'isin' => :'isin',
        :'cusip' => :'cusip',
        :'figi' => :'figi',
        :'coupon' => :'coupon',
        :'maturity_date' => :'maturityDate',
        :'offering_price' => :'offeringPrice',
        :'issue_date' => :'issueDate',
        :'bond_type' => :'bondType',
        :'debt_type' => :'debtType',
        :'industry_group' => :'industryGroup',
        :'industry_sub_group' => :'industrySubGroup',
        :'asset' => :'asset',
        :'asset_type' => :'assetType',
        :'dated_date' => :'datedDate',
        :'first_coupon_date' => :'firstCouponDate',
        :'original_offering' => :'originalOffering',
        :'amount_outstanding' => :'amountOutstanding',
        :'payment_frequency' => :'paymentFrequency',
        :'security_level' => :'securityLevel',
        :'callable' => :'callable',
        :'coupon_type' => :'couponType'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'isin' => :'String',
        :'cusip' => :'String',
        :'figi' => :'String',
        :'coupon' => :'Float',
        :'maturity_date' => :'String',
        :'offering_price' => :'Float',
        :'issue_date' => :'String',
        :'bond_type' => :'String',
        :'debt_type' => :'String',
        :'industry_group' => :'String',
        :'industry_sub_group' => :'String',
        :'asset' => :'String',
        :'asset_type' => :'String',
        :'dated_date' => :'String',
        :'first_coupon_date' => :'String',
        :'original_offering' => :'Float',
        :'amount_outstanding' => :'Float',
        :'payment_frequency' => :'String',
        :'security_level' => :'String',
        :'callable' => :'Boolean',
        :'coupon_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FinnhubRuby::BondProfile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FinnhubRuby::BondProfile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'isin')
        self.isin = attributes[:'isin']
      end

      if attributes.key?(:'cusip')
        self.cusip = attributes[:'cusip']
      end

      if attributes.key?(:'figi')
        self.figi = attributes[:'figi']
      end

      if attributes.key?(:'coupon')
        self.coupon = attributes[:'coupon']
      end

      if attributes.key?(:'maturity_date')
        self.maturity_date = attributes[:'maturity_date']
      end

      if attributes.key?(:'offering_price')
        self.offering_price = attributes[:'offering_price']
      end

      if attributes.key?(:'issue_date')
        self.issue_date = attributes[:'issue_date']
      end

      if attributes.key?(:'bond_type')
        self.bond_type = attributes[:'bond_type']
      end

      if attributes.key?(:'debt_type')
        self.debt_type = attributes[:'debt_type']
      end

      if attributes.key?(:'industry_group')
        self.industry_group = attributes[:'industry_group']
      end

      if attributes.key?(:'industry_sub_group')
        self.industry_sub_group = attributes[:'industry_sub_group']
      end

      if attributes.key?(:'asset')
        self.asset = attributes[:'asset']
      end

      if attributes.key?(:'asset_type')
        self.asset_type = attributes[:'asset_type']
      end

      if attributes.key?(:'dated_date')
        self.dated_date = attributes[:'dated_date']
      end

      if attributes.key?(:'first_coupon_date')
        self.first_coupon_date = attributes[:'first_coupon_date']
      end

      if attributes.key?(:'original_offering')
        self.original_offering = attributes[:'original_offering']
      end

      if attributes.key?(:'amount_outstanding')
        self.amount_outstanding = attributes[:'amount_outstanding']
      end

      if attributes.key?(:'payment_frequency')
        self.payment_frequency = attributes[:'payment_frequency']
      end

      if attributes.key?(:'security_level')
        self.security_level = attributes[:'security_level']
      end

      if attributes.key?(:'callable')
        self.callable = attributes[:'callable']
      end

      if attributes.key?(:'coupon_type')
        self.coupon_type = attributes[:'coupon_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          isin == o.isin &&
          cusip == o.cusip &&
          figi == o.figi &&
          coupon == o.coupon &&
          maturity_date == o.maturity_date &&
          offering_price == o.offering_price &&
          issue_date == o.issue_date &&
          bond_type == o.bond_type &&
          debt_type == o.debt_type &&
          industry_group == o.industry_group &&
          industry_sub_group == o.industry_sub_group &&
          asset == o.asset &&
          asset_type == o.asset_type &&
          dated_date == o.dated_date &&
          first_coupon_date == o.first_coupon_date &&
          original_offering == o.original_offering &&
          amount_outstanding == o.amount_outstanding &&
          payment_frequency == o.payment_frequency &&
          security_level == o.security_level &&
          callable == o.callable &&
          coupon_type == o.coupon_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [isin, cusip, figi, coupon, maturity_date, offering_price, issue_date, bond_type, debt_type, industry_group, industry_sub_group, asset, asset_type, dated_date, first_coupon_date, original_offering, amount_outstanding, payment_frequency, security_level, callable, coupon_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FinnhubRuby.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
